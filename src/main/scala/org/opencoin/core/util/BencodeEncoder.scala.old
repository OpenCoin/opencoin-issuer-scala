package org.opencoin.core.util

/* Copyright (C) 2009 Thomas Rampelberg <pyronicide@saunter.org>

* This program is free software; you can redistribute it and/or modify it under
* the terms of the GNU General Public License as published by the Free Software
* Foundation; either version 2, or (at your option) any later version.

* This program is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
* FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
* details.

* You should have received a copy of the GNU General Public License along with
* this program; if not, write to the Free Software Foundation, Inc., 59 Temple
* Place - Suite 330, Boston, MA 02111-1307, USA.
*/

// Based on https://github.com/pyronicide/scala-bencode/

import java.util.Date
import java.net.URL
import java.math.BigInteger
import org.eintr.loglady.Logging
import org.opencoin.core.token.Bencode
/**
 * Generate a bencoded string from scala objects. This can handle the
 * entire bencoding grammar which means that Int, String, List and Map can be
 * encoded.
 */

object BencodeEncoder {
  val dateFormat = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'")
  
  def encode(input: Any): String =
    input match {
      case x: Int => int(x.toString)
      case x: Long => int(x.toString)
      case x: BigInt => int(x.toString)
      case x: BigInteger => int(x.toString)
      case x: String => string(x)
      case x: URL => string(x.toString)
      case x: Date => string(dateFormat.format(x))
      case x: List[_] => list(x)
      case x: Tuple1[_] => list(x.productIterator.toList)
      case x: Tuple2[_,_] => list(x.productIterator.toList)
      case x: Tuple3[_,_,_] => list(x.productIterator.toList)
      case x: Tuple4[_,_,_,_] => list(x.productIterator.toList)
      case x: Tuple5[_,_,_,_,_] => list(x.productIterator.toList)
      case x: Tuple6[_,_,_,_,_,_] => list(x.productIterator.toList)
      case x: Tuple7[_,_,_,_,_,_,_] => list(x.productIterator.toList)
      case x: Tuple8[_,_,_,_,_,_,_,_] => list(x.productIterator.toList)
      case x: Tuple9[_,_,_,_,_,_,_,_,_] => list(x.productIterator.toList)
      case x: Tuple10[_,_,_,_,_,_,_,_,_,_] => list(x.productIterator.toList)
      case x: Tuple11[_,_,_,_,_,_,_,_,_,_,_] => list(x.productIterator.toList)
      case x: Tuple12[_,_,_,_,_,_,_,_,_,_,_,_] => list(x.productIterator.toList)
      case x: Tuple13[_,_,_,_,_,_,_,_,_,_,_,_,_] => list(x.productIterator.toList)
      case x: Tuple14[_,_,_,_,_,_,_,_,_,_,_,_,_,_] => list(x.productIterator.toList)
      case x: Tuple15[_,_,_,_,_,_,_,_,_,_,_,_,_,_,_] => list(x.productIterator.toList)
      case x: Tuple16[_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_] => list(x.productIterator.toList)
      case x: Tuple17[_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_] => list(x.productIterator.toList)
      case x: Tuple18[_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_] => list(x.productIterator.toList)
      case x: Tuple19[_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_] => list(x.productIterator.toList)
      case x: Tuple20[_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_] => list(x.productIterator.toList)
      case x: Tuple21[_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_] => list(x.productIterator.toList)
      case x: Tuple22[_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_] => list(x.productIterator.toList)
      case x: Map[String, _] => dictionary(x)
      case x: Bencode => dictionary(x.getKeyValue)
      //case x: AnyRef => encode(getCCParams(x))
      case _ => ""
    }

  private def int(input: String): String =
    "i" + input + "e"

  private def string(input: String): String =
    input.length + ":" + input

  private def list(input: List[_]): String =
    "l" + input.map( x => encode(x)).mkString + "e"

//  private def dictionary(input: String): String = 
//    "d" + input + "e"

  private def dictionary(input: Map[String, _]): String =
    "d" + input.toList.sortWith( (x,y) => x._1<y._1 ).map(
      x => (string(x._1), encode(x._2))).flatMap(
        x => x._1 + x._2 ).mkString + "e"
}
    //Create Map from any case class. Based on http://stackoverflow.com/questions/1226555/case-class-to-map-in-scala
/*
  private def getCCParams(cc: AnyRef) =
  (Map[String, Any]() /: cc.getClass.getDeclaredFields) {(a, f) =>
    f.setAccessible(true)
    a + (f.getName -> f.get(cc))
  } */
/*
  def getCCParams(cc: AnyRef): Map[String, Any] =
    (Map[String, Any]() /: cc.getClass.getDeclaredFields) {(a, f) =>
      f.setAccessible(true)
      val value = f.get(cc) match {
        // this covers tuples as well as case classes, so there may be a more specific way
        case caseClassInstance: Product => getCCParams(caseClassInstance)
        case x => x
      }
      a + (f.getName -> value)
    }


  def caseClassToMap(obj: AnyRef) = {
    val c = obj.getClass
    val predefined = List("$tag", "productArity", "productPrefix", "hashCode",
                          "toString")
    val casemethods = c.getMethods.toList.filter{
      n =>
        (n.getParameterTypes.size == 0) &&
        (n.getDeclaringClass == c) &&
        (! predefined.exists(_ == n.getName))

    }
    val values = casemethods.map(_.invoke(obj, null))
    casemethods.map(_.getName).zip(values).foldLeft(Map[String, Any]())(_+_)
  }

  // Copied from http://stackoverflow.com/questions/7525142/how-to-programmatically-determine-if-the-the-class-is-a-case-class-or-a-simple-c
  private def isCaseClass(o: AnyRef) = o.getClass.getInterfaces.find(_ == classOf[scala.Product]) != None
}
*/